// // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// // versions:
// // - protoc-gen-go-grpc v1.5.1
// // - protoc             v3.12.4
// // source: album.proto

package proto

// import (
// 	context "context"
// 	grpc "google.golang.org/grpc"
// 	codes "google.golang.org/grpc/codes"
// 	status "google.golang.org/grpc/status"
// )

// // This is a compile-time assertion to ensure that this generated file
// // is compatible with the grpc package it is being compiled against.
// // Requires gRPC-Go v1.64.0 or later.
// const _ = grpc.SupportPackageIsVersion9

// const (
// 	AlbumService_SearchAlbum_FullMethodName            = "/proto.AlbumService/SearchAlbum"
// 	AlbumService_ViewAlbum_FullMethodName              = "/proto.AlbumService/ViewAlbum"
// 	AlbumService_GetAllAlbums_FullMethodName           = "/proto.AlbumService/GetAllAlbums"
// 	AlbumService_GetAllAlbumsByArtistID_FullMethodName = "/proto.AlbumService/GetAllAlbumsByArtistID"
// )

// // AlbumServiceClient is the client API for AlbumService service.
// //
// // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
// type AlbumServiceClient interface {
// 	SearchAlbum(ctx context.Context, in *SearchAlbumRequest, opts ...grpc.CallOption) (*SearchAlbumResponse, error)
// 	ViewAlbum(ctx context.Context, in *ViewAlbumRequest, opts ...grpc.CallOption) (*ViewAlbumResponse, error)
// 	GetAllAlbums(ctx context.Context, in *GetAllAlbumsRequest, opts ...grpc.CallOption) (*GetAllAlbumsResponse, error)
// 	GetAllAlbumsByArtistID(ctx context.Context, in *GetAllAlbumsByArtistIDRequest, opts ...grpc.CallOption) (*GetAllAlbumsByArtistIDResponse, error)
// }

// type albumServiceClient struct {
// 	cc grpc.ClientConnInterface
// }

// func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
// 	return &albumServiceClient{cc}
// }

// func (c *albumServiceClient) SearchAlbum(ctx context.Context, in *SearchAlbumRequest, opts ...grpc.CallOption) (*SearchAlbumResponse, error) {
// 	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
// 	out := new(SearchAlbumResponse)
// 	err := c.cc.Invoke(ctx, AlbumService_SearchAlbum_FullMethodName, in, out, cOpts...)
// 	if err != nil {
// 		return nil, err
// 	}
// 	return out, nil
// }

// func (c *albumServiceClient) ViewAlbum(ctx context.Context, in *ViewAlbumRequest, opts ...grpc.CallOption) (*ViewAlbumResponse, error) {
// 	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
// 	out := new(ViewAlbumResponse)
// 	err := c.cc.Invoke(ctx, AlbumService_ViewAlbum_FullMethodName, in, out, cOpts...)
// 	if err != nil {
// 		return nil, err
// 	}
// 	return out, nil
// }

// func (c *albumServiceClient) GetAllAlbums(ctx context.Context, in *GetAllAlbumsRequest, opts ...grpc.CallOption) (*GetAllAlbumsResponse, error) {
// 	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
// 	out := new(GetAllAlbumsResponse)
// 	err := c.cc.Invoke(ctx, AlbumService_GetAllAlbums_FullMethodName, in, out, cOpts...)
// 	if err != nil {
// 		return nil, err
// 	}
// 	return out, nil
// }

// func (c *albumServiceClient) GetAllAlbumsByArtistID(ctx context.Context, in *GetAllAlbumsByArtistIDRequest, opts ...grpc.CallOption) (*GetAllAlbumsByArtistIDResponse, error) {
// 	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
// 	out := new(GetAllAlbumsByArtistIDResponse)
// 	err := c.cc.Invoke(ctx, AlbumService_GetAllAlbumsByArtistID_FullMethodName, in, out, cOpts...)
// 	if err != nil {
// 		return nil, err
// 	}
// 	return out, nil
// }

// // AlbumServiceServer is the server API for AlbumService service.
// // All implementations must embed UnimplementedAlbumServiceServer
// // for forward compatibility.
// type AlbumServiceServer interface {
// 	SearchAlbum(context.Context, *SearchAlbumRequest) (*SearchAlbumResponse, error)
// 	ViewAlbum(context.Context, *ViewAlbumRequest) (*ViewAlbumResponse, error)
// 	GetAllAlbums(context.Context, *GetAllAlbumsRequest) (*GetAllAlbumsResponse, error)
// 	GetAllAlbumsByArtistID(context.Context, *GetAllAlbumsByArtistIDRequest) (*GetAllAlbumsByArtistIDResponse, error)
// 	mustEmbedUnimplementedAlbumServiceServer()
// }

// // UnimplementedAlbumServiceServer must be embedded to have
// // forward compatible implementations.
// //
// // NOTE: this should be embedded by value instead of pointer to avoid a nil
// // pointer dereference when methods are called.
// type UnimplementedAlbumServiceServer struct{}

// func (UnimplementedAlbumServiceServer) SearchAlbum(context.Context, *SearchAlbumRequest) (*SearchAlbumResponse, error) {
// 	return nil, status.Errorf(codes.Unimplemented, "method SearchAlbum not implemented")
// }
// func (UnimplementedAlbumServiceServer) ViewAlbum(context.Context, *ViewAlbumRequest) (*ViewAlbumResponse, error) {
// 	return nil, status.Errorf(codes.Unimplemented, "method ViewAlbum not implemented")
// }
// func (UnimplementedAlbumServiceServer) GetAllAlbums(context.Context, *GetAllAlbumsRequest) (*GetAllAlbumsResponse, error) {
// 	return nil, status.Errorf(codes.Unimplemented, "method GetAllAlbums not implemented")
// }
// func (UnimplementedAlbumServiceServer) GetAllAlbumsByArtistID(context.Context, *GetAllAlbumsByArtistIDRequest) (*GetAllAlbumsByArtistIDResponse, error) {
// 	return nil, status.Errorf(codes.Unimplemented, "method GetAllAlbumsByArtistID not implemented")
// }
// func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}
// func (UnimplementedAlbumServiceServer) testEmbeddedByValue()                      {}

// // UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// // Use of this interface is not recommended, as added methods to AlbumServiceServer will
// // result in compilation errors.
// type UnsafeAlbumServiceServer interface {
// 	mustEmbedUnimplementedAlbumServiceServer()
// }

// func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
// 	// If the following call pancis, it indicates UnimplementedAlbumServiceServer was
// 	// embedded by pointer and is nil.  This will cause panics if an
// 	// unimplemented method is ever invoked, so we test this at initialization
// 	// time to prevent it from happening at runtime later due to I/O.
// 	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
// 		t.testEmbeddedByValue()
// 	}
// 	s.RegisterService(&AlbumService_ServiceDesc, srv)
// }

// func _AlbumService_SearchAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
// 	in := new(SearchAlbumRequest)
// 	if err := dec(in); err != nil {
// 		return nil, err
// 	}
// 	if interceptor == nil {
// 		return srv.(AlbumServiceServer).SearchAlbum(ctx, in)
// 	}
// 	info := &grpc.UnaryServerInfo{
// 		Server:     srv,
// 		FullMethod: AlbumService_SearchAlbum_FullMethodName,
// 	}
// 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
// 		return srv.(AlbumServiceServer).SearchAlbum(ctx, req.(*SearchAlbumRequest))
// 	}
// 	return interceptor(ctx, in, info, handler)
// }

// func _AlbumService_ViewAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
// 	in := new(ViewAlbumRequest)
// 	if err := dec(in); err != nil {
// 		return nil, err
// 	}
// 	if interceptor == nil {
// 		return srv.(AlbumServiceServer).ViewAlbum(ctx, in)
// 	}
// 	info := &grpc.UnaryServerInfo{
// 		Server:     srv,
// 		FullMethod: AlbumService_ViewAlbum_FullMethodName,
// 	}
// 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
// 		return srv.(AlbumServiceServer).ViewAlbum(ctx, req.(*ViewAlbumRequest))
// 	}
// 	return interceptor(ctx, in, info, handler)
// }

// func _AlbumService_GetAllAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
// 	in := new(GetAllAlbumsRequest)
// 	if err := dec(in); err != nil {
// 		return nil, err
// 	}
// 	if interceptor == nil {
// 		return srv.(AlbumServiceServer).GetAllAlbums(ctx, in)
// 	}
// 	info := &grpc.UnaryServerInfo{
// 		Server:     srv,
// 		FullMethod: AlbumService_GetAllAlbums_FullMethodName,
// 	}
// 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
// 		return srv.(AlbumServiceServer).GetAllAlbums(ctx, req.(*GetAllAlbumsRequest))
// 	}
// 	return interceptor(ctx, in, info, handler)
// }

// func _AlbumService_GetAllAlbumsByArtistID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
// 	in := new(GetAllAlbumsByArtistIDRequest)
// 	if err := dec(in); err != nil {
// 		return nil, err
// 	}
// 	if interceptor == nil {
// 		return srv.(AlbumServiceServer).GetAllAlbumsByArtistID(ctx, in)
// 	}
// 	info := &grpc.UnaryServerInfo{
// 		Server:     srv,
// 		FullMethod: AlbumService_GetAllAlbumsByArtistID_FullMethodName,
// 	}
// 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
// 		return srv.(AlbumServiceServer).GetAllAlbumsByArtistID(ctx, req.(*GetAllAlbumsByArtistIDRequest))
// 	}
// 	return interceptor(ctx, in, info, handler)
// }

// // AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// // It's only intended for direct use with grpc.RegisterService,
// // and not to be introspected or modified (even as a copy)
// var AlbumService_ServiceDesc = grpc.ServiceDesc{
// 	ServiceName: "proto.AlbumService",
// 	HandlerType: (*AlbumServiceServer)(nil),
// 	Methods: []grpc.MethodDesc{
// 		{
// 			MethodName: "SearchAlbum",
// 			Handler:    _AlbumService_SearchAlbum_Handler,
// 		},
// 		{
// 			MethodName: "ViewAlbum",
// 			Handler:    _AlbumService_ViewAlbum_Handler,
// 		},
// 		{
// 			MethodName: "GetAllAlbums",
// 			Handler:    _AlbumService_GetAllAlbums_Handler,
// 		},
// 		{
// 			MethodName: "GetAllAlbumsByArtistID",
// 			Handler:    _AlbumService_GetAllAlbumsByArtistID_Handler,
// 		},
// 	},
// 	Streams:  []grpc.StreamDesc{},
// 	Metadata: "album.proto",
// }
