networks:
  prometheus:
  prometheus-exporters:
  app-network:
    driver: bridge

services:
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    privileged: true
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_ROLLING_RESTART=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30

  novamusic-user:
    image: daronenko/novamusic-user:latest
    container_name: novamusic-user
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: user
    ports:
      - 8081:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  novamusic-playlist:
    image: daronenko/novamusic-playlist:latest
    container_name: novamusic-playlist
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: playlist
    ports:
      - 8084:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  novamusic-artist:
    image: daronenko/novamusic-artist:latest
    container_name: novamusic-artist
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: artist
    ports:
      - 8083:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  novamusic-album:
    image: daronenko/novamusic-album:latest
    container_name: novamusic-album
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: album
    ports:
      - 8082:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  novamusic-track:
    image: daronenko/novamusic-track:latest
    container_name: novamusic-track
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: track
    ports:
      - 8085:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  novamusic-csat:
    image: daronenko/novamusic-csat:latest
    container_name: novamusic-csat
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: csat
    ports:
      - 8087:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  novamusic-genre:
    image: daronenko/novamusic-genre:latest
    container_name: novamusic-genre
    platform: linux/amd64
    env_file: .prod.env
    build:
      dockerfile: docker/Dockerfile.${ENV}
      context: ..
      args:
        MICROSERVICE: genre
    ports:
      - 8086:8080
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prometheus
      - prometheus-exporters
      - app-network
    volumes:
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru

  postgres:
    container_name: novamusic-postgres
    image: daronenko/postgres-ru:latest
    build:
      dockerfile: postgres/Dockerfile
      context: .
    platform: linux/amd64
    env_file: .prod.env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-}
      - POSTGRES_DB=${POSTGRES_DB:-}
      - POSTGRES_USER=${POSTGRES_USER:-}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-}
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    restart: on-failure
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER:-} -d ${POSTGRES_DB:-}'",
        ]
      interval: 2s
      timeout: 3s
      retries: 3
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    networks:
      - prometheus

  migrations:
    container_name: novamusic-postgres-migrations
    image: ghcr.io/kukymbr/goose-docker:3.22.1
    platform: linux/amd64
    env_file: .prod.env
    restart: no
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=host=postgres port=${POSTGRES_PORT:-} user=${POSTGRES_USER:-} password=${POSTGRES_PASSWORD:-} dbname=${POSTGRES_DB:-}
      - GOOSE_VERBOSE=true
    volumes:
      - ../internal/db/postgres/migrations:/migrations
    networks:
      - prometheus

  minio:
    container_name: novamusic-minio
    image: minio/minio:latest
    platform: linux/amd64
    env_file: .prod.env
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_USER:-}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-}
      - MINIO_SERVER_URL=https://${HOST:-}:8010
      - MINIO_BROWSER_REDIRECT_URL=https://${HOST:-}
    ports:
      - 8010:9000
      - 8011:9001
    command: server --console-address :9001 /data
    volumes:
      - minio-volume:/data
      - /etc/ssl/nova-music.ru:/root/.minio/certs:ro
    networks:
      - prometheus
      - app-network

  minio-client:
    container_name: minio-client
    image: minio/mc:latest
    env_file: .prod.env
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host rm local;
      /usr/bin/mc config host add --quiet --api s3v4 local https://minio:9000 ${MINIO_USER:-} ${MINIO_PASSWORD:-};

      /usr/bin/mc mb --quiet local/avatars;
      /usr/bin/mc policy set public local/avatars;

      /usr/bin/mc mb --quiet local/images;
      /usr/bin/mc policy set public local/images;

      /usr/bin/mc mb --quiet local/tracks;
      /usr/bin/mc policy set public local/tracks;

      /usr/bin/mc mb --quiet local/playlists;
      /usr/bin/mc policy set public local/playlists;
      "
    networks:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--no-collector.rapl"
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - prometheus-exporters
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    env_file: .prod.env
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=365d'
      - '--web.external-url=${PROMETHEUS_URL:-}'
      - '--web.enable-admin-api'
    restart: unless-stopped
    expose:
      - 8002
    ports:
      - 8002:9090
    networks:
      - prometheus
      - prometheus-exporters
    depends_on:
      - node-exporter
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file: .prod.env
    environment:
      - GF_SECURITY_ADMIN_USER
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_DEFAULT_INSTANCE_NAME=${HOST:-}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ENABLE_GZIP=true
      - GF_SERVER_ROOT_URL
      - GF_SERVER_DOMAIN
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/grafana/public.crt
      - GF_SERVER_CERT_KEY=/etc/grafana/private.key
    restart: unless-stopped
    ports:
      - 8003:3000
    networks:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - /etc/ssl/nova-music.ru/public.crt:/etc/grafana/public.crt:ro
      - /etc/ssl/nova-music.ru/private.key:/etc/grafana/private.key:ro

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    env_file: .prod.env
    volumes:
      - alertmanager-data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/telegram.tmpl:/etc/alertmanager/telegram.tmpl
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=${ALERTMANAGER_EXTERNAL_URL:-}'
    restart: unless-stopped
    expose:
      - 8004
    ports:
      - 8004:9093
    networks:
      - prometheus

  nginx:
    image: nginx:latest
    # restart: always
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf
      - /var/www/nova-music/dist:/var/www/dist
      - ./nginx/logs:/var/log/nginx
      - /etc/ssl/nova-music.ru:/etc/ssl/nova-music.ru
    networks:
      - app-network
    depends_on:
      - novamusic-user
      - novamusic-track
      - novamusic-artist
      - novamusic-album
      - novamusic-playlist
      - novamusic-csat
      - novamusic-genre

volumes:
  postgres-volume:
  minio-volume:
  prometheus-data:
  grafana-data:
  alertmanager-data:
