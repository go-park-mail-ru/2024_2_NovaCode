// Code generated by MockGen. DO NOT EDIT.
// Source: proto/album/album_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	albumService "github.com/go-park-mail-ru/2024_2_NovaCode/proto/album"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAlbumServiceClient is a mock of AlbumServiceClient interface.
type MockAlbumServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumServiceClientMockRecorder
}

// MockAlbumServiceClientMockRecorder is the mock recorder for MockAlbumServiceClient.
type MockAlbumServiceClientMockRecorder struct {
	mock *MockAlbumServiceClient
}

// NewMockAlbumServiceClient creates a new mock instance.
func NewMockAlbumServiceClient(ctrl *gomock.Controller) *MockAlbumServiceClient {
	mock := &MockAlbumServiceClient{ctrl: ctrl}
	mock.recorder = &MockAlbumServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumServiceClient) EXPECT() *MockAlbumServiceClientMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockAlbumServiceClient) FindByID(ctx context.Context, in *albumService.FindByIDRequest, opts ...grpc.CallOption) (*albumService.FindByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByID", varargs...)
	ret0, _ := ret[0].(*albumService.FindByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAlbumServiceClientMockRecorder) FindByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAlbumServiceClient)(nil).FindByID), varargs...)
}

// MockAlbumServiceServer is a mock of AlbumServiceServer interface.
type MockAlbumServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumServiceServerMockRecorder
}

// MockAlbumServiceServerMockRecorder is the mock recorder for MockAlbumServiceServer.
type MockAlbumServiceServerMockRecorder struct {
	mock *MockAlbumServiceServer
}

// NewMockAlbumServiceServer creates a new mock instance.
func NewMockAlbumServiceServer(ctrl *gomock.Controller) *MockAlbumServiceServer {
	mock := &MockAlbumServiceServer{ctrl: ctrl}
	mock.recorder = &MockAlbumServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumServiceServer) EXPECT() *MockAlbumServiceServerMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockAlbumServiceServer) FindByID(arg0 context.Context, arg1 *albumService.FindByIDRequest) (*albumService.FindByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*albumService.FindByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAlbumServiceServerMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAlbumServiceServer)(nil).FindByID), arg0, arg1)
}

// mustEmbedUnimplementedAlbumServiceServer mocks base method.
func (m *MockAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlbumServiceServer")
}

// mustEmbedUnimplementedAlbumServiceServer indicates an expected call of mustEmbedUnimplementedAlbumServiceServer.
func (mr *MockAlbumServiceServerMockRecorder) mustEmbedUnimplementedAlbumServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlbumServiceServer", reflect.TypeOf((*MockAlbumServiceServer)(nil).mustEmbedUnimplementedAlbumServiceServer))
}

// MockUnsafeAlbumServiceServer is a mock of UnsafeAlbumServiceServer interface.
type MockUnsafeAlbumServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAlbumServiceServerMockRecorder
}

// MockUnsafeAlbumServiceServerMockRecorder is the mock recorder for MockUnsafeAlbumServiceServer.
type MockUnsafeAlbumServiceServerMockRecorder struct {
	mock *MockUnsafeAlbumServiceServer
}

// NewMockUnsafeAlbumServiceServer creates a new mock instance.
func NewMockUnsafeAlbumServiceServer(ctrl *gomock.Controller) *MockUnsafeAlbumServiceServer {
	mock := &MockUnsafeAlbumServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAlbumServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAlbumServiceServer) EXPECT() *MockUnsafeAlbumServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAlbumServiceServer mocks base method.
func (m *MockUnsafeAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlbumServiceServer")
}

// mustEmbedUnimplementedAlbumServiceServer indicates an expected call of mustEmbedUnimplementedAlbumServiceServer.
func (mr *MockUnsafeAlbumServiceServerMockRecorder) mustEmbedUnimplementedAlbumServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlbumServiceServer", reflect.TypeOf((*MockUnsafeAlbumServiceServer)(nil).mustEmbedUnimplementedAlbumServiceServer))
}
