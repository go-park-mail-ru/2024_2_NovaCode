// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/csat/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_NovaCode/internal/models"
	dto "github.com/go-park-mail-ru/2024_2_NovaCode/microservices/csat/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetQuestionsByTopic mocks base method.
func (m *MockUsecase) GetQuestionsByTopic(ctx context.Context, topic string) ([]*dto.CSATQuestionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByTopic", ctx, topic)
	ret0, _ := ret[0].([]*dto.CSATQuestionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByTopic indicates an expected call of GetQuestionsByTopic.
func (mr *MockUsecaseMockRecorder) GetQuestionsByTopic(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByTopic", reflect.TypeOf((*MockUsecase)(nil).GetQuestionsByTopic), ctx, topic)
}

// GetStatistics mocks base method.
func (m *MockUsecase) GetStatistics(ctx context.Context) ([]*dto.CSATStatisticsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx)
	ret0, _ := ret[0].([]*dto.CSATStatisticsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockUsecaseMockRecorder) GetStatistics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockUsecase)(nil).GetStatistics), ctx)
}

// SubmitAnswer mocks base method.
func (m *MockUsecase) SubmitAnswer(ctx context.Context, csatAnswer *models.CSATAnswer) (*dto.CSATAnswerDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAnswer", ctx, csatAnswer)
	ret0, _ := ret[0].(*dto.CSATAnswerDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAnswer indicates an expected call of SubmitAnswer.
func (mr *MockUsecaseMockRecorder) SubmitAnswer(ctx, csatAnswer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAnswer", reflect.TypeOf((*MockUsecase)(nil).SubmitAnswer), ctx, csatAnswer)
}
