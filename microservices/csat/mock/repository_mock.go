// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/csat/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_NovaCode/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetQuestionsByTopic mocks base method.
func (m *MockRepo) GetQuestionsByTopic(ctx context.Context, topic string) ([]*models.CSATQuestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByTopic", ctx, topic)
	ret0, _ := ret[0].([]*models.CSATQuestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByTopic indicates an expected call of GetQuestionsByTopic.
func (mr *MockRepoMockRecorder) GetQuestionsByTopic(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByTopic", reflect.TypeOf((*MockRepo)(nil).GetQuestionsByTopic), ctx, topic)
}

// GetStatistics mocks base method.
func (m *MockRepo) GetStatistics(ctx context.Context) ([]*models.CSATStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx)
	ret0, _ := ret[0].([]*models.CSATStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockRepoMockRecorder) GetStatistics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockRepo)(nil).GetStatistics), ctx)
}

// InsertAnswer mocks base method.
func (m *MockRepo) InsertAnswer(ctx context.Context, answer *models.CSATAnswer) (*models.CSATAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAnswer", ctx, answer)
	ret0, _ := ret[0].(*models.CSATAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAnswer indicates an expected call of InsertAnswer.
func (mr *MockRepoMockRecorder) InsertAnswer(ctx, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAnswer", reflect.TypeOf((*MockRepo)(nil).InsertAnswer), ctx, answer)
}
