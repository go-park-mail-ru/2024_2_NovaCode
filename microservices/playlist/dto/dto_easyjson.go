// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto(in *jlexer.Lexer, out *TrackIdDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "track_id":
			out.TrackID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto(out *jwriter.Writer, in TrackIdDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"track_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TrackID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrackIdDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackIdDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrackIdDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackIdDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto1(in *jlexer.Lexer, out *PlaylistTrackDTOs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PlaylistTrackDTOs, 0, 8)
			} else {
				*out = PlaylistTrackDTOs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *PlaylistTrackDTO
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(PlaylistTrackDTO)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto1(out *jwriter.Writer, in PlaylistTrackDTOs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistTrackDTOs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistTrackDTOs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistTrackDTOs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistTrackDTOs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto1(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto2(in *jlexer.Lexer, out *PlaylistTrackDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlist_id":
			out.PlaylistID = uint64(in.Uint64())
		case "track_id":
			out.TrackID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto2(out *jwriter.Writer, in PlaylistTrackDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playlist_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.PlaylistID))
	}
	{
		const prefix string = ",\"track_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TrackID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistTrackDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistTrackDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistTrackDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistTrackDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto2(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto3(in *jlexer.Lexer, out *PlaylistDTOs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PlaylistDTOs, 0, 8)
			} else {
				*out = PlaylistDTOs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *PlaylistDTO
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(PlaylistDTO)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto3(out *jwriter.Writer, in PlaylistDTOs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistDTOs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistDTOs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistDTOs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistDTOs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto3(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto4(in *jlexer.Lexer, out *PlaylistDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "owner_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalText(data))
			}
		case "owner_name":
			out.OwnerName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto4(out *jwriter.Writer, in PlaylistDTO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if true {
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.RawText((in.OwnerID).MarshalText())
	}
	if in.OwnerName != "" {
		const prefix string = ",\"owner_name\":"
		out.RawString(prefix)
		out.String(string(in.OwnerName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20242NovaCodeMicroservicesPlaylistDto4(l, v)
}
