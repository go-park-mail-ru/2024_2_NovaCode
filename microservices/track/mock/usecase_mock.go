// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/track/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddFavoriteTrack mocks base method.
func (m *MockUsecase) AddFavoriteTrack(ctx context.Context, userID uuid.UUID, trackID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteTrack", ctx, userID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteTrack indicates an expected call of AddFavoriteTrack.
func (mr *MockUsecaseMockRecorder) AddFavoriteTrack(ctx, userID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteTrack", reflect.TypeOf((*MockUsecase)(nil).AddFavoriteTrack), ctx, userID, trackID)
}

// DeleteFavoriteTrack mocks base method.
func (m *MockUsecase) DeleteFavoriteTrack(ctx context.Context, userID uuid.UUID, trackID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavoriteTrack", ctx, userID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavoriteTrack indicates an expected call of DeleteFavoriteTrack.
func (mr *MockUsecaseMockRecorder) DeleteFavoriteTrack(ctx, userID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavoriteTrack", reflect.TypeOf((*MockUsecase)(nil).DeleteFavoriteTrack), ctx, userID, trackID)
}

// IsFavoriteTrack mocks base method.
func (m *MockUsecase) IsFavoriteTrack(ctx context.Context, userID uuid.UUID, trackID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavoriteTrack", ctx, userID, trackID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoriteTrack indicates an expected call of IsFavoriteTrack.
func (mr *MockUsecaseMockRecorder) IsFavoriteTrack(ctx, userID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoriteTrack", reflect.TypeOf((*MockUsecase)(nil).IsFavoriteTrack), ctx, userID, trackID)
}
