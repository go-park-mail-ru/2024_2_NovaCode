// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/artist/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_2_NovaCode/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddFavoriteArtist mocks base method.
func (m *MockRepo) AddFavoriteArtist(ctx context.Context, userID uuid.UUID, artistID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteArtist", ctx, userID, artistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteArtist indicates an expected call of AddFavoriteArtist.
func (mr *MockRepoMockRecorder) AddFavoriteArtist(ctx, userID, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteArtist", reflect.TypeOf((*MockRepo)(nil).AddFavoriteArtist), ctx, userID, artistID)
}

// Create mocks base method.
func (m *MockRepo) Create(ctx context.Context, artist *models.Artist) (*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, artist)
	ret0, _ := ret[0].(*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepoMockRecorder) Create(ctx, artist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepo)(nil).Create), ctx, artist)
}

// DeleteFavoriteArtist mocks base method.
func (m *MockRepo) DeleteFavoriteArtist(ctx context.Context, userID uuid.UUID, artistID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavoriteArtist", ctx, userID, artistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavoriteArtist indicates an expected call of DeleteFavoriteArtist.
func (mr *MockRepoMockRecorder) DeleteFavoriteArtist(ctx, userID, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavoriteArtist", reflect.TypeOf((*MockRepo)(nil).DeleteFavoriteArtist), ctx, userID, artistID)
}

// FindById mocks base method.
func (m *MockRepo) FindById(ctx context.Context, artistID uint64) (*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, artistID)
	ret0, _ := ret[0].(*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRepoMockRecorder) FindById(ctx, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRepo)(nil).FindById), ctx, artistID)
}

// FindByQuery mocks base method.
func (m *MockRepo) FindByQuery(ctx context.Context, query string) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByQuery", ctx, query)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByQuery indicates an expected call of FindByQuery.
func (mr *MockRepoMockRecorder) FindByQuery(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByQuery", reflect.TypeOf((*MockRepo)(nil).FindByQuery), ctx, query)
}

// GetAll mocks base method.
func (m *MockRepo) GetAll(ctx context.Context) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepoMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepo)(nil).GetAll), ctx)
}

// GetFavoriteArtists mocks base method.
func (m *MockRepo) GetFavoriteArtists(ctx context.Context, userID uuid.UUID) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteArtists", ctx, userID)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteArtists indicates an expected call of GetFavoriteArtists.
func (mr *MockRepoMockRecorder) GetFavoriteArtists(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteArtists", reflect.TypeOf((*MockRepo)(nil).GetFavoriteArtists), ctx, userID)
}

// GetPopular mocks base method.
func (m *MockRepo) GetPopular(ctx context.Context) ([]*models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopular", ctx)
	ret0, _ := ret[0].([]*models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopular indicates an expected call of GetPopular.
func (mr *MockRepoMockRecorder) GetPopular(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopular", reflect.TypeOf((*MockRepo)(nil).GetPopular), ctx)
}

// IsFavoriteArtist mocks base method.
func (m *MockRepo) IsFavoriteArtist(ctx context.Context, userID uuid.UUID, artistID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavoriteArtist", ctx, userID, artistID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavoriteArtist indicates an expected call of IsFavoriteArtist.
func (mr *MockRepoMockRecorder) IsFavoriteArtist(ctx, userID, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavoriteArtist", reflect.TypeOf((*MockRepo)(nil).IsFavoriteArtist), ctx, userID, artistID)
}
