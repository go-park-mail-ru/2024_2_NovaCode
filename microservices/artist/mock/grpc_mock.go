// Code generated by MockGen. DO NOT EDIT.
// Source: proto/artist/artist_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	artistService "github.com/go-park-mail-ru/2024_2_NovaCode/proto/artist"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockArtistServiceClient is a mock of ArtistServiceClient interface.
type MockArtistServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockArtistServiceClientMockRecorder
}

// MockArtistServiceClientMockRecorder is the mock recorder for MockArtistServiceClient.
type MockArtistServiceClientMockRecorder struct {
	mock *MockArtistServiceClient
}

// NewMockArtistServiceClient creates a new mock instance.
func NewMockArtistServiceClient(ctrl *gomock.Controller) *MockArtistServiceClient {
	mock := &MockArtistServiceClient{ctrl: ctrl}
	mock.recorder = &MockArtistServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistServiceClient) EXPECT() *MockArtistServiceClientMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockArtistServiceClient) FindByID(ctx context.Context, in *artistService.FindByIDRequest, opts ...grpc.CallOption) (*artistService.FindByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByID", varargs...)
	ret0, _ := ret[0].(*artistService.FindByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockArtistServiceClientMockRecorder) FindByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockArtistServiceClient)(nil).FindByID), varargs...)
}

// MockArtistServiceServer is a mock of ArtistServiceServer interface.
type MockArtistServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockArtistServiceServerMockRecorder
}

// MockArtistServiceServerMockRecorder is the mock recorder for MockArtistServiceServer.
type MockArtistServiceServerMockRecorder struct {
	mock *MockArtistServiceServer
}

// NewMockArtistServiceServer creates a new mock instance.
func NewMockArtistServiceServer(ctrl *gomock.Controller) *MockArtistServiceServer {
	mock := &MockArtistServiceServer{ctrl: ctrl}
	mock.recorder = &MockArtistServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistServiceServer) EXPECT() *MockArtistServiceServerMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockArtistServiceServer) FindByID(arg0 context.Context, arg1 *artistService.FindByIDRequest) (*artistService.FindByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*artistService.FindByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockArtistServiceServerMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockArtistServiceServer)(nil).FindByID), arg0, arg1)
}

// mustEmbedUnimplementedArtistServiceServer mocks base method.
func (m *MockArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArtistServiceServer")
}

// mustEmbedUnimplementedArtistServiceServer indicates an expected call of mustEmbedUnimplementedArtistServiceServer.
func (mr *MockArtistServiceServerMockRecorder) mustEmbedUnimplementedArtistServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArtistServiceServer", reflect.TypeOf((*MockArtistServiceServer)(nil).mustEmbedUnimplementedArtistServiceServer))
}

// MockUnsafeArtistServiceServer is a mock of UnsafeArtistServiceServer interface.
type MockUnsafeArtistServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeArtistServiceServerMockRecorder
}

// MockUnsafeArtistServiceServerMockRecorder is the mock recorder for MockUnsafeArtistServiceServer.
type MockUnsafeArtistServiceServerMockRecorder struct {
	mock *MockUnsafeArtistServiceServer
}

// NewMockUnsafeArtistServiceServer creates a new mock instance.
func NewMockUnsafeArtistServiceServer(ctrl *gomock.Controller) *MockUnsafeArtistServiceServer {
	mock := &MockUnsafeArtistServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeArtistServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeArtistServiceServer) EXPECT() *MockUnsafeArtistServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedArtistServiceServer mocks base method.
func (m *MockUnsafeArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArtistServiceServer")
}

// mustEmbedUnimplementedArtistServiceServer indicates an expected call of mustEmbedUnimplementedArtistServiceServer.
func (mr *MockUnsafeArtistServiceServerMockRecorder) mustEmbedUnimplementedArtistServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArtistServiceServer", reflect.TypeOf((*MockUnsafeArtistServiceServer)(nil).mustEmbedUnimplementedArtistServiceServer))
}
