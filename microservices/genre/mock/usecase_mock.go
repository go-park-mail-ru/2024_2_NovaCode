// Code generated by MockGen. DO NOT EDIT.
// Source: internal/genre/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_NovaCode/microservices/genre/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockUsecase) GetAll(ctx context.Context) ([]*dto.GenreDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*dto.GenreDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUsecaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsecase)(nil).GetAll), ctx)
}

// GetAllByArtistID mocks base method.
func (m *MockUsecase) GetAllByArtistID(ctx context.Context, artistID uint64) ([]*dto.GenreDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByArtistID", ctx, artistID)
	ret0, _ := ret[0].([]*dto.GenreDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByArtistID indicates an expected call of GetAllByArtistID.
func (mr *MockUsecaseMockRecorder) GetAllByArtistID(ctx, artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByArtistID", reflect.TypeOf((*MockUsecase)(nil).GetAllByArtistID), ctx, artistID)
}

// GetAllByTrackID mocks base method.
func (m *MockUsecase) GetAllByTrackID(ctx context.Context, trackID uint64) ([]*dto.GenreDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByTrackID", ctx, trackID)
	ret0, _ := ret[0].([]*dto.GenreDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByTrackID indicates an expected call of GetAllByTrackID.
func (mr *MockUsecaseMockRecorder) GetAllByTrackID(ctx, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByTrackID", reflect.TypeOf((*MockUsecase)(nil).GetAllByTrackID), ctx, trackID)
}
