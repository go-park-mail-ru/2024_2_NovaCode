definitions:
  dto.AlbumDTO:
    properties:
      artistName:
        type: string
      image:
        type: string
      name:
        type: string
      release:
        type: string
      trackCount:
        type: integer
    type: object
  dto.ArtistDTO:
    properties:
      bio:
        type: string
      country:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
    type: object
  dto.GenreDTO:
    properties:
      id:
        type: integer
      name:
        type: string
      rusName:
        type: string
    type: object
  dto.PublicUserDTO:
    properties:
      id:
        type: string
      image:
        type: string
      username:
        type: string
    type: object
  dto.TrackDTO:
    properties:
      album:
        type: string
      artist:
        type: string
      duration:
        type: integer
      filepath:
        type: string
      image:
        type: string
      name:
        type: string
      release:
        type: string
    type: object
  dto.UserDTO:
    properties:
      email:
        type: string
      id:
        type: string
      image:
        type: string
      username:
        type: string
    type: object
  dto.UserTokenDTO:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserDTO'
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      image:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
      username:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  utils.MessageResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/albums/{id}:
    get:
      description: Retrieves an album using the provided album ID in the URL path.
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Album found
          schema:
            $ref: '#/definitions/dto.AlbumDTO'
        "400":
          description: Invalid album ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Album not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to encode the album data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get album by ID
  /api/v1/albums/all:
    get:
      description: Retrieves a list of all albums from the database.
      responses:
        "200":
          description: List of all albums
          schema:
            items:
              $ref: '#/definitions/dto.AlbumDTO'
            type: array
        "404":
          description: No albums found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load albums
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all albums
  /api/v1/albums/artist/{artistID}:
    get:
      description: Retrieves a list of all albums for a given artist ID from the database.
      parameters:
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: integer
      responses:
        "200":
          description: List of albums by artist
          schema:
            items:
              $ref: '#/definitions/dto.AlbumDTO'
            type: array
        "404":
          description: No albums found for the artist
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load albums
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all albums by artist ID
  /api/v1/albums/search:
    get:
      description: Searches for albums based on the provided "name" query parameter.
      parameters:
      - description: Name of the album to search for
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: List of found albums
          schema:
            items:
              $ref: '#/definitions/dto.AlbumDTO'
            type: array
        "400":
          description: Missing or invalid query parameter
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: No albums found with the provided name
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to search or encode albums
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Search albums by name
  /api/v1/artists/{id}:
    get:
      description: Retrieves an artist using the provided artist ID in the URL path.
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Artist found
          schema:
            $ref: '#/definitions/dto.ArtistDTO'
        "400":
          description: Invalid artist ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Artist not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to encode the artist data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get artist by ID
  /api/v1/artists/all:
    get:
      description: Retrieves a list of all artists from the database.
      responses:
        "200":
          description: List of all artists
          schema:
            items:
              $ref: '#/definitions/dto.ArtistDTO'
            type: array
        "404":
          description: No artists found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load artists
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all artists
  /api/v1/artists/search:
    get:
      description: Searches for artists based on the provided "name" query parameter.
      parameters:
      - description: Name of the artist to search for
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: List of found artists
          schema:
            items:
              $ref: '#/definitions/dto.ArtistDTO'
            type: array
        "400":
          description: Missing or invalid query parameter
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: No artists found with the provided name
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to search or encode artists
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Search artists by name
  /api/v1/auth/csrf:
    get:
      description: Generates a CSRF token for the authenticated user
      responses:
        "200":
          description: CSRF token generated successfully
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Generate a CSRF token
      tags:
      - Authentication
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using their username and password. On success,
        returns an authentication token.
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with token
          schema:
            $ref: '#/definitions/dto.UserTokenDTO'
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Invalid username or password
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to return token
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: User Login
      tags:
      - Authentication
  /api/v1/auth/logout:
    post:
      description: Clears the access token cookie to log the user out.
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/utils.MessageResponse'
        "500":
          description: Failed to log out
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Log out user
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with a unique username, email, and password.
        On success, returns a user token.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User registration successful with token
          schema:
            $ref: '#/definitions/dto.UserTokenDTO'
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to return token
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /api/v1/genres/album/{albumID}:
    get:
      description: Retrieves a list of all genres for a given album ID from the database.
      parameters:
      - description: Album ID
        in: path
        name: albumID
        required: true
        type: integer
      responses:
        "200":
          description: List of genres by album
          schema:
            items:
              $ref: '#/definitions/dto.GenreDTO'
            type: array
        "404":
          description: No genres found for the album
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load genres
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all genres by album ID
  /api/v1/genres/all:
    get:
      description: Retrieves a list of all genres from the database.
      responses:
        "200":
          description: List of all genres
          schema:
            items:
              $ref: '#/definitions/dto.GenreDTO'
            type: array
        "404":
          description: No genres found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load genres
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all genres
  /api/v1/genres/artist/{artistID}:
    get:
      description: Retrieves a list of all genres for a given artist ID from the database.
      parameters:
      - description: Artist ID
        in: path
        name: artistID
        required: true
        type: integer
      responses:
        "200":
          description: List of genres by artist
          schema:
            items:
              $ref: '#/definitions/dto.GenreDTO'
            type: array
        "404":
          description: No genres found for the artist
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load genres
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all genres by artist ID
  /api/v1/genres/track/{trackID}:
    get:
      description: Retrieves a list of all genres for a given track ID from the database.
      parameters:
      - description: Track ID
        in: path
        name: trackID
        required: true
        type: integer
      responses:
        "200":
          description: List of genres by track
          schema:
            items:
              $ref: '#/definitions/dto.GenreDTO'
            type: array
        "404":
          description: No genres found for the track
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load genres
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all genres by track ID
  /api/v1/health:
    get:
      description: Returns "OK" if the service is running
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check
  /api/v1/tracks/{id}:
    get:
      description: Retrieves an track using the provided track ID in the URL path.
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Track found
          schema:
            $ref: '#/definitions/dto.TrackDTO'
        "400":
          description: Invalid track ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Track not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to encode the track data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get track by ID
  /api/v1/tracks/all:
    get:
      description: Retrieves a list of all tracks from the database.
      responses:
        "200":
          description: List of all tracks
          schema:
            items:
              $ref: '#/definitions/dto.TrackDTO'
            type: array
        "404":
          description: No tracks found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load tracks
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all tracks
  /api/v1/tracks/byArtistId/{artistId}:
    get:
      description: Retrieves a list of all tracks for a given artist ID.
      parameters:
      - description: Artist ID
        in: path
        name: artistId
        required: true
        type: integer
      responses:
        "200":
          description: List of tracks by artist
          schema:
            items:
              $ref: '#/definitions/dto.TrackDTO'
            type: array
        "404":
          description: No tracks found for the given artist ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to load tracks by artist ID
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all tracks by artist ID
  /api/v1/tracks/search:
    get:
      description: Searches for tracks based on the provided "name" query parameter.
      parameters:
      - description: Name of the track to search for
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: List of found tracks
          schema:
            items:
              $ref: '#/definitions/dto.TrackDTO'
            type: array
        "400":
          description: Missing or invalid query parameter
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: No tracks found with the provided name
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to search or encode tracks
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Search tracks by name
  /api/v1/users/{user_id}:
    put:
      consumes:
      - application/json
      description: Update user profile information such as username and email. Requires
        a valid user ID in the request context.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: User update successful
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "400":
          description: Invalid request body or missing fields
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Not enough permissions to update user details
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User ID not found in context
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to update user details
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update user details
      tags:
      - User
  /api/v1/users/{user_id}/image:
    post:
      consumes:
      - multipart/form-data
      description: Upload a profile image for the user. The image file should be in
        a supported image format.
      parameters:
      - description: Profile image file
        in: formData
        name: file
        required: true
        type: file
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "400":
          description: Invalid file format or missing file
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Not enough permissions to upload image
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Upload profile imag
      tags:
      - User
  /api/v1/users/{username}:
    get:
      description: Retrieves public profile details for the specified username.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/dto.PublicUserDTO'
        "400":
          description: Invalid or missing username
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get user by username
      tags:
      - User
  /api/v1/users/me:
    get:
      description: Retrieves profile details for the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/dto.UserDTO'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to retrieve user details
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get current user details
      tags:
      - User
swagger: "2.0"
